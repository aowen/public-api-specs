openapi: 3.0.0
info:
  version: 1.0.0
  title: Scoir's Public API
  description: Scoir's way of integrating with external system to keep student records up-to-date.
servers:
  - url: app.scoir.io/public/dev/api
    description: Dev server
  - url: app.scoir.io/public/api
    description: Production server
security: 
  # this is TBD
  - AuthToken: []
tags:
  - name: messages
paths:
      
  
  #allow college to publish a message 
  /students/message:
    post:
      tags:
        - messages
      requestBody:
        description: Send a message to Scoir students.  
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/message"

      responses:
        "200":
          description: Message recorded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: string
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500" 
  

  #allow college to see performance of their messages                  
  /students/messages/{collegeId}/performance:
    get:
      tags:
      - messages
      description: Request performance details for all Scoir messages sent by a specific college. 
      parameters:
        - in: path
          name: collegeId
          schema:
            type: string
          required: true
          description: "Unique identifer for the college."
            
      responses:
        "200":
          description: Message performance details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: "#/components/schemas/message_performance"
                
                  
                
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"  
components:
  responses:
    "401":
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/genericError"
          examples:
            response:
              value: |-
                {
                  "message": "We don't know who you are."
                }
    "403":
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/genericError"
          examples:
            response:
              value: |-
                {
                  "message": "Forbidden to access this resource."
                }
    "404":
      description: Item not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/itemNotFoundError"
          examples:
            response:
              value: |-
               {
                  "itemsNotFound": [
                    {
                      "name": "scoirStudentId",
                      "value": "12345",
                      "message": "can't match Id."
                    }
                  ]
                }
    "500":
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/genericError"
          examples:
            response:
              value: |-
                {
                  "message": "Error details"
                }
  securitySchemes:
    # if we go the service account route: https://cloud.google.com/endpoints/docs/openapi/service-account-authentication
    AuthToken:
      type: apiKey
      in: header
      name: apikey
  schemas:
   
    message_performance:
      type: object
      properties:
        messageId:
          type: string
          description: " Identifier of the message"
        studentId:
          type: string
          description: " Identifier of student that received the message."
        readMessageDate:
          type: string
          format: date
          description: "Date the student first read the message."
        clickedMessageDate:
          type: string
          format: date
          description: "Date the student first clicked a link in the message."
        deletedMessageDate:
          type: string
          format: date
          description: "Date the student deleted the message."
    
    message:
      type: object
      properties:
        collegeId:
          type: string
          description: "Identifer of the college that is sending the message."
        studentIds:
          type: array
          description: "Array of Ids for students that will receive the message."
          items:
            type: string
        subject:
          type: string
          description: "Subject of the message."
        body:
          type: string
          format: binary
          description: "Body of the message."
        callToAction:
          type: object
          properties:
            callToActionURL:
              type: string
              format: uri
            callToActionText:
              type: string
  
          
    #Error Messages
    genericError:
      properties:
        message:
          type: string
          
    itemNotFoundError:
      properties:
        itemsNotFound:
          type: array
          items:
              type: object
              properties:
                name:
                  type: string
                value:
                  type: string
        information:
          type: string