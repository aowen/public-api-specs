openapi: 3.0.0
info:
  version: 1.0.0
  title: Scoir's Public API
  description: Scoir's way of integrating with external system to keep student records up-to-date.
servers:
  - url: app.scoir.io/public/dev/api
    description: Dev server
  - url: app.scoir.io/public/api
    description: Production server
security: 
  # this is TBD
  - AuthToken: []
tags:
  - name: crm

paths:
  # allow college to report details of students in their CRM that are also on Scoir.     
  /students/crm-matches:
    post:
      tags:
        - crm
      requestBody:
        description: Record details about students following a college on Scoir that are also in the college's CRM.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/matches"
      responses:
        "200":
          description: Updates recorded.
          content:
            application/json:
              examples:
                response:
                  value: '"OK"'
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"        
  
  
components:
  responses:
    "401":
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/genericError"
          examples:
            response:
              value: |-
                {
                  "message": "We don't know who you are."
                }
    "403":
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/genericError"
          examples:
            response:
              value: |-
                {
                  "message": "Forbidden to access this resource."
                }
    "404":
      description: Item not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/itemNotFoundError"
          examples:
            response:
              value: |-
               {
                  "itemsNotFound": [
                    {
                      "name": "scoirStudentId",
                      "value": "12345",
                      "message": "can't match Id."
                    }
                  ]
                }
    "500":
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/genericError"
          examples:
            response:
              value: |-
                {
                  "message": "Error details"
                }
  securitySchemes:
    # if we go the service account route: https://cloud.google.com/endpoints/docs/openapi/service-account-authentication
    AuthToken:
      type: apiKey
      in: header
      name: apikey
  schemas:
    matches:
      type: array
      items:
        type: object
        description: "Details about a student on Scoir and in the CRM."
        required:
          - scoirStudentId
        properties:
          scoirStudentId:
            type: string
            description: "Unique identifier assigned to a student in Scoir."
          collegeId:
            type: string
            description: "Unique identifer assigned to the college, shared between Scoir and Application Platform."
          crmRecordOriginationDate:
            type: string
            format: date
            description: "The date the student's record first appeared in the college's CRM."
          crmRecordStatus:
            type: string
            description: "Status of the student's record in the college's CRM, such as inquiry, prospect, applicant, etc."
            
 
    #Error Messages
    genericError:
      properties:
        message:
          type: string
          
    itemNotFoundError:
      properties:
        itemsNotFound:
          type: array
          items:
              type: object
              properties:
                name:
                  type: string
                value:
                  type: string
        information:
          type: string